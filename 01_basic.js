// 1. Ts 是完全兼容 Js 的------------------------------------------------------------
console.log("Hello TypeScript");
// 2. Ts 支持给变量确定类型------------------------------------------------------------
var a; // 确定 a 为 number 类型  // 默认将 ts 编译为 ES3 版本的，所以 let 会变为 var
a = 1;
a = 2;
// a = "msg";    // 会提示错误，但是还是默认还是能编译通过（可以通过设置不允许编译通过）
// ★★★★★★★★★★★★★★★★★★★★★
// 但是一般也不这样声明和初始化，一般声明时并初始化
var b = 77;
b = 88;
// b = "qq";     // 同样提示 string 类型不能赋值给 number 类型
// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
// 更简单一点可以直接省略类型声明，ts 编译器会直接用变量的初始值确定类型
var c = true; // 初始值是 true ，就确定了变量 c 为 boolean 类型
// c = 123;      // 所以不能将 number 类型赋值给 boolean  类型
// 3. Ts 也支持对函数的形参确定类型。（而且默认确定了形参的个数。）--------------------------------
function sum(x, y) {
    console.log(x + y);
}
sum(123, 456);
// 如果是 js 里面，函数的形参的类型和个数是不确定的，像下面传字符串，传1个，多个...参数都是可以的
// 但是 ts 里面给形参确定了类型，而且只能传递对应的个数的参数
// sum("123", "456");   //  在 ts 里面提示错误
// sum(1, 2, 3)      // 在 ts 里面会提示错误
// 4. Ts 也能给函数的返回值确定类型-------------------------------------------------------
function getMsg() {
    return 123;
    // return "123";    // 在 ts 里会报错
}
